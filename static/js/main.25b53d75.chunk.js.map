{"version":3,"sources":["Game.js","App.js","index.js"],"names":["words","Object","keys","wordsObject","forEach","key","push","log","DEBUG","searchVimeoVideos","qs","a","axios","get","headers","Authorization","res","vimeoData","data","getFnLib","GameManager","props","useState","screens","setScreens","currentScreen","setCurrentScreen","welcomeScreen","style","display","flex","alignItems","justifyContent","flexDirection","Typography","variant","Button","onClick","event","CustomEvent","detail","type","navigation","destination","window","dispatchEvent","screenStyle","height","color","screenWrapper","comp","className","useEffect","onGameEvent","e","index","s","i","name","addEventListener","removeEventListener","component","LinearProgress","Game","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.25b53d75.chunk.js","sourcesContent":["import Phaser from \"phaser\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport \"./Game.css\";\r\nimport * as log from \"loglevel\";\r\nimport axios from \"axios\";\r\nimport Player from \"@vimeo/player\";\r\nimport * as wordsObject from \"./words\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\n\r\nconst words = [];\r\nObject.keys(wordsObject).forEach((key) => {\r\n  words.push(wordsObject[`${key}`]);\r\n});\r\nlog.setLevel(log.levels.DEBUG);\r\n\r\nconst keys = {\r\n  vimeo: \"701aa8cf274531af3ccd513e9642f67c\"\r\n};\r\nconst getFnLib = () => {\r\n  const searchVimeoVideos = async (qs) => {\r\n    let res = await axios.get(`https://api.vimeo.com/videos${qs}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${keys.vimeo}`\r\n      }\r\n    });\r\n    log.debug(\"searchVimeoVideos\", { res });\r\n    if (res) {\r\n      let vimeoData = res.data.data;\r\n      return vimeoData;\r\n    }\r\n    return [];\r\n  };\r\n  return {\r\n    searchVimeoVideos\r\n  };\r\n};\r\nconst fnLib = getFnLib();\r\n\r\nfunction SpeechRecognizer(props) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [recognition, setRecognition] = useState(false);\r\n  useEffect(() => {\r\n    log.debug(\"SpeechRecognizer\", words);\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const SpeechGrammarList =\r\n      window.SpeechGrammarList || window.webkitSpeechGrammarList;\r\n    const SpeechRecognitionEvent =\r\n      window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;\r\n    const grammarWords = [\"hemoglobine is superstar\"];\r\n    const grammar =\r\n      \"#JSGF V1.0; grammar commands; public <command> = \" +\r\n      grammarWords.join(\" | \") +\r\n      \" ;\";\r\n    const recognition = new SpeechRecognition();\r\n    let speechRecognitionList = new SpeechGrammarList();\r\n    speechRecognitionList.addFromString(grammar, 1);\r\n    recognition.grammars = speechRecognitionList;\r\n    recognition.continuous = true;\r\n    recognition.lang = \"en-US\";\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 1;\r\n    console.log(\"SpeechRecognizer\", {\r\n      SpeechRecognition,\r\n      SpeechGrammarList,\r\n      SpeechRecognitionEvent,\r\n      grammarWords,\r\n      grammar,\r\n      recognition,\r\n      speechRecognitionList\r\n    });\r\n\r\n    recognition.onresult = function (event) {\r\n      log.debug(\"Speech result.\", event);\r\n      Object.keys(event.results).forEach((key) => {\r\n        Object.keys(event.results[key]).forEach((innerKey) => {\r\n          const word = event.results[key][innerKey].transcript;\r\n          log.debug(\r\n            `Word: ${word}. Confidence: ` +\r\n              event.results[key][innerKey].confidence\r\n          );\r\n        });\r\n      });\r\n    };\r\n    recognition.onspeechend = async function (e) {\r\n      log.debug(\"Speech ended.\");\r\n      setIsRecording(false);\r\n    };\r\n    setRecognition(recognition);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={() => {\r\n          try {\r\n            if (isRecording) {\r\n              recognition.stop();\r\n              setIsRecording(false);\r\n              log.debug(\"Stopped speach recognition.\");\r\n            } else {\r\n              recognition.start();\r\n              setIsRecording(true);\r\n              log.debug(\"Ready to receive a word command.\");\r\n            }\r\n          } catch (e) {\r\n            log.warn(e.message);\r\n          }\r\n        }}\r\n      >\r\n        {(() => {\r\n          if (isRecording) {\r\n            return \"Stop\";\r\n          } else {\r\n            return \"Start\";\r\n          }\r\n        })()}\r\n      </Button>\r\n      <div className=\"output\"></div>\r\n      <div className=\"hints\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction VideoGrid() {\r\n  const [vimeoData, setVimeoData] = useState([]);\r\n  useEffect(() => {\r\n    const update = async () => {\r\n      const newVimeoData = await fnLib.searchVimeoVideos(\r\n        `?sort=date&direction=desc&query=${encodeURIComponent(\"mercedes benz\")}`\r\n      );\r\n      setVimeoData(newVimeoData);\r\n    };\r\n    update();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={async () => {\r\n          let iframes = window.document.querySelectorAll(`.playbern-video`);\r\n          log.debug(\"playing all videos\", { iframes });\r\n          if (iframes) {\r\n            for (let i = 0; i < iframes.length; i++) {\r\n              await new Promise((res) => {\r\n                const vidIframe = iframes[i];\r\n                var player = new Player(vidIframe);\r\n                player.on(\"play\", function () {\r\n                  console.log(\"Played the video\");\r\n                });\r\n                player.getVideoTitle().then(function (title) {\r\n                  console.log(\"title:\", title);\r\n                });\r\n                player.setAutopause(false);\r\n                player.play();\r\n                res();\r\n                /* setTimeout(() => {\r\n                  player.pause();\r\n                  res();\r\n                }, 3000) */\r\n              });\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        play all\r\n      </button>\r\n      {vimeoData\r\n        .filter((vd, vdi) => vdi <= 20 && vd && vd.embed && vd.embed.html)\r\n        .map((vd) => {\r\n          return (\r\n            <iframe\r\n              key={vd.uri}\r\n              title=\"vimeo-video\"\r\n              className=\"playbern-video\"\r\n              src={`https://player.vimeo.com/video/${vd.uri.replace(\r\n                \"/videos/\",\r\n                \"\"\r\n              )}`}\r\n              width=\"200\"\r\n              height=\"200\"\r\n              frameBorder=\"0\"\r\n              allow=\"autoplay\"\r\n            ></iframe>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction GameManager(props) {\r\n  const [screens, setScreens] = useState([]);\r\n  const [currentScreen, setCurrentScreen] = useState(0);\r\n\r\n  const welcomeScreen = (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\"\r\n      }}\r\n    >\r\n      <Typography variant=\"h1\">4 THE LIKES</Typography>\r\n      <Typography variant=\"h4\">\r\n        A dumb game by Giuseppe, Alan & Aurora\r\n      </Typography>\r\n      <Button\r\n        onClick={() => {\r\n          const event = new CustomEvent(\"game\", {\r\n            detail: {\r\n              type: \"navigation\",\r\n              navigation: {\r\n                destination: \"story\"\r\n              }\r\n            }\r\n          });\r\n          // Dispatch the event.\r\n          window.dispatchEvent(event);\r\n        }}\r\n      >\r\n        Start the Game\r\n      </Button>\r\n    </div>\r\n  );\r\n  const screenStyle = {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n    color: \"white\"\r\n  };\r\n  const screenWrapper = (comp) => (\r\n    <div className=\"screen-wrapper\" style={screenStyle}>\r\n      {comp}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    const onGameEvent = (e) => {\r\n      log.debug(\"got game event\", e);\r\n      if (e.detail && e.detail.type === \"navigation\") {\r\n        log.debug(\"finding screen\", { screens, e });\r\n        let index = 0;\r\n        screens.forEach((s, i) => {\r\n          if (s.name === e.detail.navigation.destination) {\r\n            log.debug(\"selecting screen\", s);\r\n            index = i;\r\n          }\r\n        });\r\n        setCurrentScreen(index);\r\n      }\r\n    };\r\n    window.addEventListener(\"game\", onGameEvent);\r\n    return () => {\r\n      window.removeEventListener(\"game\", onGameEvent);\r\n    };\r\n  }, [screens]);\r\n\r\n  useEffect(() => {\r\n    // subscribe to the game events\r\n    setScreens([\r\n      {\r\n        name: \"main\",\r\n        component: screenWrapper(welcomeScreen)\r\n      },\r\n      {\r\n        name: \"story\",\r\n        component: screenWrapper(\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flex: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              flexDirection: \"column\"\r\n            }}\r\n          >\r\n            <Typography variant=\"h1\">Story</Typography>\r\n            <Button\r\n              onClick={() => {\r\n                const event = new CustomEvent(\"game\", {\r\n                  detail: {\r\n                    type: \"navigation\",\r\n                    navigation: {\r\n                      destination: \"round\"\r\n                    }\r\n                  }\r\n                });\r\n                // Dispatch the event.\r\n                window.dispatchEvent(event);\r\n              }}\r\n            >\r\n              Start ...for real this time.\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                const event = new CustomEvent(\"game\", {\r\n                  detail: {\r\n                    type: \"navigation\",\r\n                    navigation: {\r\n                      destination: \"main\"\r\n                    }\r\n                  }\r\n                });\r\n                // Dispatch the event.\r\n                window.dispatchEvent(event);\r\n              }}\r\n            >\r\n              Back\r\n            </Button>\r\n          </div>\r\n        )\r\n      },\r\n      {\r\n        name: \"round\",\r\n        component: screenWrapper(\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flex: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              flexDirection: \"column\"\r\n            }}\r\n          >\r\n            <Typography variant=\"h1\">Round</Typography>\r\n            <Button\r\n              onClick={() => {\r\n                const event = new CustomEvent(\"game\", {\r\n                  detail: {\r\n                    type: \"navigation\",\r\n                    navigation: {\r\n                      destination: \"score\"\r\n                    }\r\n                  }\r\n                });\r\n                // Dispatch the event.\r\n                window.dispatchEvent(event);\r\n              }}\r\n            >\r\n              Call your boss.\r\n            </Button>\r\n          </div>\r\n        )\r\n      },\r\n      {\r\n        name: \"score\",\r\n        component: screenWrapper(\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flex: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              flexDirection: \"column\"\r\n            }}\r\n          >\r\n            <Typography variant=\"h1\">Score</Typography>\r\n            <Button\r\n              onClick={() => {\r\n                const event = new CustomEvent(\"game\", {\r\n                  detail: {\r\n                    type: \"navigation\",\r\n                    navigation: {\r\n                      destination: \"main\"\r\n                    }\r\n                  }\r\n                });\r\n                // Dispatch the event.\r\n                window.dispatchEvent(event);\r\n              }}\r\n            >\r\n              Replay\r\n            </Button>\r\n          </div>\r\n        )\r\n      }\r\n    ]);\r\n    setCurrentScreen(0);\r\n  }, []);\r\n\r\n  if (screens[currentScreen]) {\r\n    return screens[currentScreen].component;\r\n  }\r\n  return <LinearProgress />;\r\n}\r\n\r\nexport default function Game() {\r\n  return <GameManager />;\r\n}\r\n\r\n/* export function PhaserComponent() {\r\n  function resize(game) {\r\n    var canvas = document.querySelector(\"canvas\");\r\n    var windowWidth = window.innerWidth;\r\n    var windowHeight = window.innerHeight;\r\n    var windowRatio = windowWidth / windowHeight;\r\n    var gameRatio = game.config.width / game.config.height;\r\n    if (windowRatio < gameRatio) {\r\n      canvas.style.width = windowWidth + \"px\";\r\n      canvas.style.height = windowWidth / gameRatio + \"px\";\r\n    } else {\r\n      canvas.style.width = windowHeight * gameRatio + \"px\";\r\n      canvas.style.height = windowHeight + \"px\";\r\n    }\r\n  }\r\n  const runGame = () => {\r\n    const vw = Math.max(\r\n      document.documentElement.clientWidth || 0,\r\n      window.innerWidth || 0\r\n    );\r\n    const vh = Math.max(\r\n      document.documentElement.clientHeight || 0,\r\n      window.innerHeight || 0\r\n    );\r\n    var config = {\r\n      type: Phaser.AUTO,\r\n      scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        parent: \"phaser-example\",\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n        width: vw,\r\n        height: vh\r\n      },\r\n      physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n          gravity: { y: 500 }\r\n        }\r\n      },\r\n      scene: {\r\n        noMargins: true,\r\n        preload: preload,\r\n        create: create\r\n      }\r\n    };\r\n\r\n    var game = new Phaser.Game(config);\r\n\r\n    function preload() {\r\n      this.load.setBaseURL(\"http://labs.phaser.io\");\r\n\r\n      this.load.image(\"sky\", \"assets/skies/space3.png\");\r\n      this.load.image(\"logo\", \"assets/sprites/phaser3-logo.png\");\r\n      this.load.image(\"red\", \"assets/particles/red.png\");\r\n    }\r\n\r\n    function create() {\r\n      this.add.image(400, 300, \"sky\");\r\n\r\n      var particles = this.add.particles(\"red\");\r\n\r\n      var emitter = particles.createEmitter({\r\n        speed: 500,\r\n        scale: { start: 1, end: 0 },\r\n        blendMode: \"ADD\"\r\n      });\r\n\r\n      var logo = this.physics.add.image(400, 100, \"logo\");\r\n\r\n      logo.setVelocity(100, 200);\r\n      logo.setBounce(1, 1);\r\n      logo.setCollideWorldBounds(true);\r\n\r\n      emitter.startFollow(logo);\r\n    }\r\n    return game;\r\n  };\r\n  useEffect(() => {\r\n    let game;\r\n    window.addEventListener(\"resize\", () => {\r\n      log.debug(\"resized\");\r\n      if (game) {\r\n        log.debug(\"destroying game\");\r\n        game.destroy(true);\r\n      }\r\n      game = runGame();\r\n      resize(game);\r\n    });\r\n    game = runGame();\r\n    resize(game);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <SpeechRecognizer />\r\n      <VideoGrid />\r\n    </div>\r\n  );\r\n} */\r\n","import \"./styles.css\";\nimport Game from \"./Game\";\n\nexport default function App() {\n  return <Game />;\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}